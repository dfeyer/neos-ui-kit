/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface NeosBadge {

    }
  }

  interface HTMLNeosBadgeElement extends StencilComponents.NeosBadge, HTMLStencilElement {}

  var HTMLNeosBadgeElement: {
    prototype: HTMLNeosBadgeElement;
    new (): HTMLNeosBadgeElement;
  };
  interface HTMLElementTagNameMap {
    'neos-badge': HTMLNeosBadgeElement;
  }
  interface ElementTagNameMap {
    'neos-badge': HTMLNeosBadgeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'neos-badge': JSXElements.NeosBadgeAttributes;
    }
  }
  namespace JSXElements {
    export interface NeosBadgeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface NeosButton {
      'active': boolean;
      'disabled': boolean;
      'focused': boolean;
      'size': string;
      'squared': boolean;
      'theme': string;
      'type': string;
    }
  }

  interface HTMLNeosButtonElement extends StencilComponents.NeosButton, HTMLStencilElement {}

  var HTMLNeosButtonElement: {
    prototype: HTMLNeosButtonElement;
    new (): HTMLNeosButtonElement;
  };
  interface HTMLElementTagNameMap {
    'neos-button': HTMLNeosButtonElement;
  }
  interface ElementTagNameMap {
    'neos-button': HTMLNeosButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'neos-button': JSXElements.NeosButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface NeosButtonAttributes extends HTMLAttributes {
      'active'?: boolean;
      'disabled'?: boolean;
      'focused'?: boolean;
      'size'?: string;
      'squared'?: boolean;
      'theme'?: string;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NeosFormInput {
      'disabled': boolean;
      'label': string;
      'placeholder': string;
      'type': string;
      'value': string;
    }
  }

  interface HTMLNeosFormInputElement extends StencilComponents.NeosFormInput, HTMLStencilElement {}

  var HTMLNeosFormInputElement: {
    prototype: HTMLNeosFormInputElement;
    new (): HTMLNeosFormInputElement;
  };
  interface HTMLElementTagNameMap {
    'neos-form-input': HTMLNeosFormInputElement;
  }
  interface ElementTagNameMap {
    'neos-form-input': HTMLNeosFormInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'neos-form-input': JSXElements.NeosFormInputAttributes;
    }
  }
  namespace JSXElements {
    export interface NeosFormInputAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'label'?: string;
      'placeholder'?: string;
      'type'?: string;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NeosIcon {
      'name': string;
      'squared': boolean;
      'theme': string;
      'type': string;
    }
  }

  interface HTMLNeosIconElement extends StencilComponents.NeosIcon, HTMLStencilElement {}

  var HTMLNeosIconElement: {
    prototype: HTMLNeosIconElement;
    new (): HTMLNeosIconElement;
  };
  interface HTMLElementTagNameMap {
    'neos-icon': HTMLNeosIconElement;
  }
  interface ElementTagNameMap {
    'neos-icon': HTMLNeosIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'neos-icon': JSXElements.NeosIconAttributes;
    }
  }
  namespace JSXElements {
    export interface NeosIconAttributes extends HTMLAttributes {
      'name'?: string;
      'squared'?: boolean;
      'theme'?: string;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NeosInspectorGroupHeader {
      'icon': string;
      'label': string;
      'open': boolean;
    }
  }

  interface HTMLNeosInspectorGroupHeaderElement extends StencilComponents.NeosInspectorGroupHeader, HTMLStencilElement {}

  var HTMLNeosInspectorGroupHeaderElement: {
    prototype: HTMLNeosInspectorGroupHeaderElement;
    new (): HTMLNeosInspectorGroupHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'neos-inspector-group-header': HTMLNeosInspectorGroupHeaderElement;
  }
  interface ElementTagNameMap {
    'neos-inspector-group-header': HTMLNeosInspectorGroupHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'neos-inspector-group-header': JSXElements.NeosInspectorGroupHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface NeosInspectorGroupHeaderAttributes extends HTMLAttributes {
      'icon'?: string;
      'label'?: string;
      'onNeosVisibilitySwitched'?: (event: CustomEvent<boolean>) => void;
      'open'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NeosInspectorGroup {
      'closed': boolean;
      'icon': string;
      'label': string;
    }
  }

  interface HTMLNeosInspectorGroupElement extends StencilComponents.NeosInspectorGroup, HTMLStencilElement {}

  var HTMLNeosInspectorGroupElement: {
    prototype: HTMLNeosInspectorGroupElement;
    new (): HTMLNeosInspectorGroupElement;
  };
  interface HTMLElementTagNameMap {
    'neos-inspector-group': HTMLNeosInspectorGroupElement;
  }
  interface ElementTagNameMap {
    'neos-inspector-group': HTMLNeosInspectorGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'neos-inspector-group': JSXElements.NeosInspectorGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface NeosInspectorGroupAttributes extends HTMLAttributes {
      'closed'?: boolean;
      'icon'?: string;
      'label'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NeosLabel {
      'label': string;
      'theme': string;
    }
  }

  interface HTMLNeosLabelElement extends StencilComponents.NeosLabel, HTMLStencilElement {}

  var HTMLNeosLabelElement: {
    prototype: HTMLNeosLabelElement;
    new (): HTMLNeosLabelElement;
  };
  interface HTMLElementTagNameMap {
    'neos-label': HTMLNeosLabelElement;
  }
  interface ElementTagNameMap {
    'neos-label': HTMLNeosLabelElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'neos-label': JSXElements.NeosLabelAttributes;
    }
  }
  namespace JSXElements {
    export interface NeosLabelAttributes extends HTMLAttributes {
      'label'?: string;
      'theme'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NeosToolbarSeparator {
      'theme': string;
    }
  }

  interface HTMLNeosToolbarSeparatorElement extends StencilComponents.NeosToolbarSeparator, HTMLStencilElement {}

  var HTMLNeosToolbarSeparatorElement: {
    prototype: HTMLNeosToolbarSeparatorElement;
    new (): HTMLNeosToolbarSeparatorElement;
  };
  interface HTMLElementTagNameMap {
    'neos-toolbar-separator': HTMLNeosToolbarSeparatorElement;
  }
  interface ElementTagNameMap {
    'neos-toolbar-separator': HTMLNeosToolbarSeparatorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'neos-toolbar-separator': JSXElements.NeosToolbarSeparatorAttributes;
    }
  }
  namespace JSXElements {
    export interface NeosToolbarSeparatorAttributes extends HTMLAttributes {
      'theme'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NeosToolbar {
      'theme': string;
    }
  }

  interface HTMLNeosToolbarElement extends StencilComponents.NeosToolbar, HTMLStencilElement {}

  var HTMLNeosToolbarElement: {
    prototype: HTMLNeosToolbarElement;
    new (): HTMLNeosToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'neos-toolbar': HTMLNeosToolbarElement;
  }
  interface ElementTagNameMap {
    'neos-toolbar': HTMLNeosToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'neos-toolbar': JSXElements.NeosToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface NeosToolbarAttributes extends HTMLAttributes {
      'theme'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;